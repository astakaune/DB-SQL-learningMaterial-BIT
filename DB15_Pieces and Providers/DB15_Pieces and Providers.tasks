Literatūra:
Keli sujungimai vienoje užklausoje:
https://www.sqlshack.com/sql-multiple-joins-for-beginners-with-examples/

6. Pieces and providers.
6.1. Create pieces, providers and provides  tables according relational schema given bellow:

CREATE TABLE Pieces (
  Code INTEGER PRIMARY KEY NOT NULL,
  Name TEXT NOT NULL  );
 
 CREATE TABLE Providers (
  Code VARCHAR(40) 
  PRIMARY KEY NOT NULL,  
  Name TEXT NOT NULL  );
  
 CREATE TABLE Provides (
  Piece INTEGER, 
  FOREIGN KEY (Piece) REFERENCES Pieces(Code),
  Provider VARCHAR(40), 
  FOREIGN KEY (Provider) REFERENCES Providers(Code),  
  Price INTEGER NOT NULL,
  PRIMARY KEY(Piece, Provider) 
  );


6.2. Insert given rows into those tables:
 
INSERT INTO providers(Code, Name) VALUES('HAL','Clarke Enterprises');
 INSERT INTO Providers(Code, Name) VALUES('RBT','Susan Calvin Corp.');
 INSERT INTO providers(code, name) VALUES('TNBC','Skellington Supplies');
 
 INSERT INTO pieces(code, name) VALUES(1,'Sprocket');
 INSERT INTO pieces(code, name) VALUES(2,'Screw');
 INSERT INTO pieces(code, name) VALUES(3,'Nut');
 INSERT INTO pieces(code, name) VALUES(4,'Bolt');
 
 INSERT INTO provides(piece, provider, price) VALUES(1,'HAL',10);
 INSERT INTO provides(piece, provider, price) VALUES(1,'RBT',15);
 INSERT INTO provides(piece, provider, price) VALUES(2,'HAL',20);
 INSERT INTO provides(piece, provider, price) VALUES(2,'RBT',15);
 INSERT INTO provides(piece, provider, price) VALUES(2,'TNBC',14);
 INSERT INTO provides(piece, provider, price) VALUES(3,'RBT',50);
 INSERT INTO provides(piece, provider, price) VALUES(3,'TNBC',45);
 INSERT INTO provides(piece, provider, price) VALUES(4,'HAL',5);
 INSERT INTO provides(piece, provider, price) VALUES(4,'RBT',7);
 
 
6.3. Tasks:
1. Select the name of all the pieces.

SELECT name
FROM pieces;

2. Select all the providers' data.

SELECT *
FROM providers;

3. Obtain the average price of each piece.

SELECT piece, ROUND(AVG(price)) AS "AVG Price"
FROM provides
GROUP BY piece
;

4. Obtain the names of all providers who supply piece 1.

SELECT providers.name, provides.piece
FROM providers
INNER JOIN provides
ON providers.code = provides.provider
WHERE provides.piece = 1;

5. Select the name of pieces provided by provider with code "HAL".

SELECT pieces.name
FROM pieces
INNER JOIN provides
ON pieces.code = provides.piece
AND provides.provider = 'HAL'
;

6. For each piece, find the most expensive offering of that piece and include the piece name, provider name, and price (note that there could be two providers who supply the same piece at the most expensive price).

SELECT Pieces.Name, Providers.Name, Price
   FROM Pieces 
   INNER JOIN Provides ON Pieces.Code = Piece
   INNER JOIN Providers ON Providers.Code = Provider
   WHERE Price =
   (
     SELECT MAX(Price) 
     FROM Provides
     WHERE Piece = Pieces.Code
   );

7. Add an entry to the database to indicate that "Skellington Supplies" (code "TNBC") will provide sprockets (code "1") for 7 cents each.



8. Increase all prices by one cent.

UPDATE provides 
SET price = price + 1;

9. Update the database to reflect that "Susan Calvin Corp." (code "RBT") will not supply bolts (code 4).

DELETE FROM provides
WHERE piece = 4 AND provider = 'RBT';

10. Update the database to reflect that "Susan Calvin Corp." (code "RBT") will not supply any pieces (the provider should still remain in the database).

DELETE FROM provides
WHERE provider = 'RBT';