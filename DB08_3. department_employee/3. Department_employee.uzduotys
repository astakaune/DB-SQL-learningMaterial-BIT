3.1. Create departments and employees tables according relational schema given in img Department_employee:
CREATE TABLE departments (
    Code INTEGER PRIMARY KEY NOT NULL,
    Name TEXT,
    Budget REAL
);
    
CREATE TABLE employees (
    SSN INTEGER PRIMARY KEY NOT NULL,
    Name TEXT,
    LastName TEXT,
    Department INTEGER,
    FOREIGN KEY (department) REFERENCES departments (Code)
);


3.2. Insert given rows into those tables:
INSERT INTO Departments(Code,Name,Budget) VALUES(14,'IT',65000);
INSERT INTO Departments(Code,Name,Budget) VALUES(37,'Accounting',15000);
INSERT INTO Departments(Code,Name,Budget) VALUES(59,'Human Resources',240000);
INSERT INTO Departments(Code,Name,Budget) VALUES(77,'Research',55000);

INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('123234877','Michael','Rogers',14);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('152934485','Anand','Manikutty',14);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('222364883','Carol','Smith',37);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('326587417','Joe','Stevens',37);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('332154719','Mary-Anne','Foster',14);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('332569843','George','O''Donnell',77);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('546523478','John','Doe',59);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('631231482','David','Smith',77);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('654873219','Zacary','Efron',59);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('745685214','Eric','Goldsmith',59);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('845657245','Elizabeth','Doe',14);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES('845657246','Kumar','Swamy',14);

3.3. Tasks:
1. Select the last name of all employees.

SELECT lastname
FROM employees;


2. Select the last name of all employees, without duplicates.

SELECT DISTINCT LastName
FROM employees;


3. Select all the data of employees whose last name is "Smith".

SELECT *
FROM employees
WHERE lastname = 'Smith';


4. Select all the data of employees whose last name is "Smith" or "Doe".

SELECT *
FROM employees
WHERE lastname = 'Smith' OR lastname = 'Doe';


5. Select all the data of employees that work in department 14.

SELECT *
FROM employees
WHERE department = 14;


6. Select all the data of employees that work in department 37 or department 77.

SELECT *
FROM employees
WHERE department = 37 OR department = 77;


7. Select all the data of employees whose last name begins with an "S".

SELECT *
FROM employees
WHERE lastname LIKE 'S%';


8. Select the sum of all the departments' budgets.

SELECT SUM(budget) AS "Sum of budgets"
FROM departments;


9. Select the number of employees in each department (you only need to show the 
	department code and the number of employees).
	
SELECT code, count(department) AS "Number of employees in department"
FROM departments
INNER JOIN employees
ON departments.code = employees.department
GROUP BY department
ORDER BY count(department) DESC;
	
	
10. Select all the data of employees, including each employee's department's data.

SELECT *
FROM employees
INNER JOIN departments
ON employees.department = departments.code;


11. Select the name and last name of each employee, along with the name and budget of the employee's department.

SELECT employees.name, lastname, departments.name, budget
FROM employees
INNER JOIN departments
ON employees.department = departments.code;


12. Select the name and last name of employees working for departments with a budget greater than $60,000.

SELECT employees.name, LastName, budget
FROM employees
INNER JOIN departments
ON employees.department = departments.code
WHERE budget > 60000;


13. Select the departments with a budget larger than the average budget of all the departments.

SELECT *
FROM Departments
WHERE Budget >
(
SELECT AVG(Budget)
FROM Departments
);


14. Select the names of departments with more than two employees.
galima priskirti lenteles pavadinimui raide, pav D. ir toliau ja naudoti kaip sutrumpinima.

SELECT D.Name FROM Departments D
WHERE 2 < 
(
SELECT COUNT(*) 
FROM Employees
WHERE Department = D.Code
);


15. Select the name and last name of employees working for departments with second lowest budget.

SELECT e.Name, e.LastName
FROM Employees e
WHERE e.Department = (
SELECT sub.Code
FROM (SELECT * FROM Departments d ORDER BY d.budget LIMIT 2) sub
ORDER BY budget DESC LIMIT 1);

arba

SELECT name, lastname
FROM employees
WHERE department = 
(SELECT departments.code
FROM employees
LEFT JOIN departments
ON employees.department = departments.code
ORDER BY budget
LIMIT 1
OFFSET 2);



16. Add a new department called "Quality Assurance", with a budget of $40,000 and departmental code 11. Add an employee called "Mary Moore" in that department, with SSN 847-21-9811.

INSERT INTO Departments(Code,Name,Budget) VALUES(11,'Quality Assurance',40000);
INSERT INTO Employees(SSN,Name,LastName,Department) VALUES ('847219811','Mary','Moore',11);


17. Reduce the budget of all departments by 10%.

SELECT name, budget, ROUND((budget * 0.9)) AS "Reduced by 10% budget"
FROM departments;

18. Reassign all employees from the Research department (code 77) to the IT department (code 14).

UPDATE employees
SET department = 14
WHERE department = 77;

19. Delete from the table all employees in the IT department (code 14).

DELETE FROM employees
WHERE department = 14;


20. Delete from the table all employees who work in departments with a budget greater than or equal to $60,000.

DELETE FROM employees
WHERE department IN (
SELECT * 
FROM departments 
WHERE budget >= 60000
);


21. Delete from the table all employees.

DELETE * FROM employees;