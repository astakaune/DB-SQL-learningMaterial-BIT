PASKAITOS VIDEO DB09

4. The warehouse.
4.1. Create warehouses and boxes tables according relational schema given in fig.4.warehouse_boxes.schema.png.

CREATE TABLE Warehouses (
    Code INTEGER PRIMARY KEY,
    Location TEXT,
    Capacity INTEGER
);

CREATE TABLE Boxes (
    Code VARCHAR(255) PRIMARY KEY,
    Contents TEXT,
    Value REAL,
    Warehouse INTEGER,
    FOREIGN KEY (Warehouse) REFERENCES Warehouses(Code)
);


4.2. Insert given rows into those tables:
 

 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(1,'Chicago',3);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(2,'Chicago',4);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(3,'New York',7);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(4,'Los Angeles',2);
 INSERT INTO Warehouses(Code,Location,Capacity) VALUES(5,'San Francisco',8);
 
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('0MN7','Rocks',180,3);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4H8P','Rocks',250,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('4RT3','Scissors',190,4);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('7G3H','Rocks',200,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8JN6','Papers',75,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('8Y6U','Papers',50,3);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('9J6F','Papers',175,2);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('LL08','Rocks',140,4);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P0H6','Scissors',125,1);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('P2T6','Scissors',150,2);
 INSERT INTO Boxes(Code,Contents,Value,Warehouse) VALUES('TU55','Papers',90,5);

4.3. Tasks:

1. Select all warehouses.

SELECT *
FROM warehouses;


2. Select all boxes with a value larger than $150.

SELECT *
FROM boxes
WHERE value > 150
ORDER BY value;

3. Select all distinct contents in all the boxes.

SELECT DISTINCT contents
FROM boxes;

4. Select the average value of all the boxes.

SELECT ROUND(AVG(value)) AS "AVG VALUE"
FROM boxes;

5. Select the warehouse code and the average value of the boxes in each warehouse.

SELECT warehouse, ROUND(AVG(value)) AS "AVG BOX VALUE"
FROM boxes
GROUP BY warehouse;

6. Same as previous exercise, but select only those warehouses where the average value of the boxes is greater than 150.

SELECT warehouse, AVG(Value) AS "AVG BOX VALUE"
  FROM Boxes
  GROUP BY warehouse
  HAVING AVG(Value) > 150;

7. Select the code of each box, along with the name of the city the box is located in.

SELECT boxes.code, location
FROM boxes
INNER JOIN warehouses
ON boxes.warehouse = warehouses.code;


8. Select the warehouse codes, along with the number of boxes in each warehouse. Optionally, take into account that some warehouses are empty (i.e., the box count should show up as zero, instead of omitting the warehouse from the result).

SELECT Warehouses.Code, COUNT(Boxes.Code)
FROM Warehouses 
LEFT JOIN Boxes
ON Warehouses.Code = Boxes.Warehouse
GROUP BY Warehouses.Code;


9. Select the codes of all warehouses that are saturated (a warehouse is saturated if the number of boxes in it is larger than the warehouse's capacity).

????? kazkas negerai
SELECT boxes.warehouse, COUNT(boxes.code) AS "Number of boxes"
FROM Boxes
INNER JOIN warehouses
ON boxes.warehouse = warehouses.code
GROUP BY boxes.warehouse
HAVING COUNT(boxes.code) > warehouses.capacity;
???

//kitas variantas
SELECT code
FROM Warehouses
WHERE capacity < (
SELECT COUNT(*)
FROM Boxes
WHERE warehouse = Warehouses.code
);


10. Select the codes of all the boxes located in Chicago.

SELECT boxes.code, location
FROM boxes
INNER JOIN warehouses
ON boxes.warehouse = warehouses.Code
WHERE location = 'Chicago';

11. Create a new warehouse in New York with a capacity for 3 boxes.

INSERT INTO warehouses (code, location, capacity)
VALUES(6, 'New York', 3); 

12. Create a new box, with code "H5RT", containing "Papers" with a value of $200, and located in warehouse 2.

INSERT INTO boxes (code, contents, value, warehouse)
VALUES ('H5RT', 'Papers', 200, 2);

13. Reduce the value of all boxes by 15%.

SELECT code, value, ROUND((value * 0.85)) AS "15% reduced value"
FROM boxes;

14. Remove all boxes with a value lower than $100.

DELETE FROM boxes
WHERE value < 100;