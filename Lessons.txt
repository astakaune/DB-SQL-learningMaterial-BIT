Destytojas ALgirdas Kušlys
Pradžia 2021.09.02
MOKOMOJI MEDŽIAGA: https://sqlbolt.com/lesson


---------------------------------------
TABLES

Lenteles pavadinimas daugiskaita, pav., Table: Movies
Sudaro:
1. Stulpeliai: Id, Title, Director, Year, Length_min
2. Eilutės.


---------------------------------------
Lesson 1. SELECT
SELECT (ką paimti, is kur paimti)

pav., 
SELECT Title, column, another_column, ...
FROM Movies;

SELECT * (for all columns)
FROM Movies;

!!! String sql = "SELECT * FROM movies WHERE title = 'Toy Story'";

---------------------------------------
Lesson 2. WHERE

SELECT column, another_column, …
FROM mytable
WHERE condition
    AND/OR another_condition
    AND/OR …;

Operator	Condition	SQL Example

=, !=, < <=, >, >=	Standard numerical operators	col_name != 4

BETWEEN … AND …	Number is within range of two values (inclusive)	col_name BETWEEN 1.5 AND 10.5

NOT BETWEEN … AND …	Number is not within range of two values (inclusive)	col_name NOT BETWEEN 1 AND 10

IN (…)	Number exists in a list	col_name IN (2, 4, 6)

NOT IN (…)	Number does not exist in a list	col_name NOT IN (1, 3, 5)

pav.,
SELECT * FROM Movies
WHERE Id = 6


---------------------------------------
Lesson 3. WHERE

Operator	Condition	SQL Example

=	Case sensitive exact string comparison (notice the single equals)	col_name = "abc"

!= or <>	Case sensitive exact string inequality comparison	col_name != "abcd"

LIKE	Case insensitive exact string comparison	col_name LIKE "ABC"

NOT LIKE	Case insensitive exact string inequality comparison	col_name NOT LIKE "ABCD"

%	Used anywhere in a string to match a sequence of zero or more characters (only with LIKE or NOT LIKE)	col_name LIKE "%AT%"
(matches "AT", "ATTIC", "CAT" or even "BATS")

_	Used anywhere in a string to match a single character (only with LIKE or NOT LIKE)	col_name LIKE "AN_"
(matches "AND", but not "AN")

IN (…)	String exists in a list	col_name IN ("A", "B", "C")

NOT IN (…) String does not exist in a list	col_name NOT IN ("D", "E", "F")


-----------------------------------------
Lesson 4. DISTINCT, ORDER BY, 

SELECT DISTINCT column, another_column, …
FROM mytable
WHERE condition(s)
ORDER BY column ASC/DESC
LIMIT num_limit OFFSET num_offset;


------------------------------------------
Lesson 5. Check point

ex5. List the third and fourth largest cities (by population) in the United States and their population
SELECT city, population FROM north_american_cities
WHERE Country = "United States"
ORDER BY Population DESC
LIMIT 2 OFFSET 2;

-----------------------------------------
Lesson 6. JOIN (Sąryšiai tarp lentelių) - INNER JOIN (arba tiesiog JOIN)

SELECT column, another_table_column, …
FROM mytable
INNER JOIN another_table 
    ON mytable.id = another_table.id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;


--------------------------------------------
Lesson 7. JOIN - OUTER JOIN: LEFT JOIN, RIGHT JOIN, FULL JOIN

SELECT column, another_column, …
FROM mytable
INNER/LEFT/RIGHT/FULL JOIN another_table 
    ON mytable.id = another_table.matching_id
WHERE condition(s)
ORDER BY column, … ASC/DESC
LIMIT num_limit OFFSET num_offset;


----------------------------------------------
Lesson 8. NULL

//Select query with constraints on NULL values
SELECT column, another_column, …
FROM mytable
WHERE column IS/IS NOT NULL
AND/OR another_condition
AND/OR …;


---------------------------------------------
Lesson 9. AS (EXPRESSIONs)

SELECT particle_speed / 2.0 AS half_particle_speed
FROM physics_data
WHERE ABS(particle_position) * 10.0 > 500;

Ex1. List all movies and their combined sales in millions of dollars
SELECT title, (Domestic_sales + International_sales) / 1000000 AS "Overall sales"
FROM movies
INNER JOIN Boxoffice
ON movies.id = boxoffice.movie_id
ORDER BY "Overall sales" DESC;

Ex2. List all movies and their ratings in percent
SELECT Title, Rating * 10 AS "Reitingas, %" 
FROM movies
INNER JOIN Boxoffice
ON movies.id = Boxoffice.movie_id
ORDER BY "Reitingas, %" DESC;

Ex3. List all movies that were released on even number years
SELECT title, year
FROM movies
WHERE (year % 2 = 0)
ORDER BY year DESC
;


-----------------------------------------------
Lesson 10. AGG_FUNC, GROUP BY - Aggregate expressions (or functions)

SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression;

Function	Description
COUNT(*), COUNT(column)	A common function used to counts the number of rows in the group if no column name is specified. Otherwise, count the number of rows in the group with non-NULL values in the specified column.
MIN(column)	Finds the smallest numerical value in the specified column for all rows in the group.
MAX(column)	Finds the largest numerical value in the specified column for all rows in the group.
AVG(column)	Finds the average numerical value in the specified column for all rows in the group.
SUM(column)	Finds the sum of all numerical values in the specified column for the rows in the group.

SELECT AGG_FUNC(column_or_expression) AS aggregate_description, …
FROM mytable
WHERE constraint_expression
GROUP BY column; (The GROUP BY clause works by grouping rows that have the same value in the column specified.)

ex1. Find the total number of employee years worked in each building
SELECT building, SUM(Years_employed) AS "Total of employment duration, years" 
FROM employees
GROUP BY Building;

-----------------------------------------------
Lesson 11. HAVING (using only with GROUP BY) or WHERE (without GROUP BY)

SELECT group_by_column, AGG_FUNC(column_expression) AS aggregate_result_alias, …
FROM mytable
WHERE condition
GROUP BY column
HAVING group_condition;

ex1. Find the number of Artists in the studio (without a HAVING clause) 
SELECT role, COUNT(*)
FROM employees
WHERE Role LIKE "Artist";

ex2. Find the number of Employees of each role in the studio
SELECT role, COUNT(*)
FROM employees
GROUP BY (Role);

ex3. Find the total number of years employed by all Engineers
SELECT Role, SUM(Years_employed) AS "SUM of employment, years"
FROM employees
GROUP BY Role
HAVING role LIKE "engin%";


---------------------------------------------------
Lesson 12. Order of execution. Check point

SELECT DISTINCT column, AGG_FUNC(column_or_expression), …
FROM mytable
    JOIN another_table
      ON mytable.column = another_table.column
    WHERE constraint_expression
    GROUP BY column
    HAVING constraint_expression
    ORDER BY column ASC/DESC
    LIMIT count OFFSET COUNT;

Query order of execution:
1. FROM and JOINs
2. WHERE
3. GROUP BY
4. HAVING
5. SELECT
6. DISTINCT
7. ORDER BY
8. LIMIT / OFFSET

ex1. Find the number of movies each director has directed
SELECT director, COUNT(title) AS "Number of movies"
FROM movies
GROUP BY Director;

ex2. Find the total domestic and international sales that can be attributed to each director
SELECT director, ROUND(SUM(Domestic_sales + International_sales)) AS "Total sales, M*USD"
FROM Movies
INNER JOIN Boxoffice
ON movies.Id = Boxoffice.Movie_id
GROUP BY Director
ORDER BY "Total sales, M*USD" DESC;


------------------------------------------------
Lesson 13. INSERT INTO (inserting rows)

INSERT INTO mytable
((column, another_column, …) // using for insertion for specific column )
VALUES (value_or_expr, another_value_or_expr, …),
      (value_or_expr_2, another_value_or_expr_2, …),
      …;

INSERT INTO boxoffice
(movie_id, rating, sales_in_millions)
VALUES (1, 9.9, 283742034 / 1000000);


-----------------------------------------------
Lesson 14. UPDATE, SET - Updating rows

UPDATE mytable
SET column = value_or_expr, 
    other_column = another_value_or_expr, 
    …
WHERE condition;


--------------------------------------------
Lesson 15. DELETE FROM - Deleting rows

DELETE FROM mytable
WHERE condition; //jei nerašome, ištrina visas rows, t.y. visą table


-----------------------------------------
Lesson 16. CREATE TABLE, IF NOT EXISTS

CREATE TABLE IF NOT EXISTS mytable (
    column DataType TableConstraint DEFAULT default_value,
    another_column DataType TableConstraint DEFAULT default_value,
    …
);

                                Table data types
Data type	Description
INTEGER, BOOLEAN	- The integer datatypes can store whole integer values like the count of a number or an age. In some implementations, the boolean value is just represented as an integer value of just 0 or 1.
FLOAT, DOUBLE, REAL	- The floating point datatypes can store more precise numerical data like measurements or fractional values. Different types can be used depending on the floating point precision required for that value.
CHARACTER(num_chars), VARCHAR(num_chars), TEXT	-The text based datatypes can store strings and text in all sorts of locales. The distinction between the various types generally amount to underlaying efficiency of the database when working with these columns.
            Both the CHARACTER and VARCHAR (variable character) types are specified with the max number of characters that they can store (longer values may be truncated), so can be more efficient to store and query with big tables.
DATE, DATETIME -	SQL can also store date and time stamps to keep track of time series and event data. They can be tricky to work with especially when manipulating data across timezones.
BLOB -	Finally, SQL can store binary data in blobs right in the database. These values are often opaque to the database, so you usually have to store them with the right metadata to requery them.

                                Table constraints
Constraint	Description
PRIMARY KEY	- This means that the values in this column are unique, and each value can be used to identify a single row in this table.
AUTOINCREMENT	- For integer values, this means that the value is automatically filled in and incremented with each row insertion. Not supported in all databases.
UNIQUE -	This means that the values in this column have to be unique, so you can't insert another row with the same value in this column as another row in the table. Differs from the `PRIMARY KEY` in that it doesn't have to be a key for a row in the table.
NOT NULL -	This means that the inserted value can not be `NULL`.
CHECK (expression) - This allows you to run a more complex expression to test whether the values inserted are valid. For example, you can check that values are positive, or greater than a specific size, or start with a certain prefix, etc.
FOREIGN KEY	- This is a consistency check which ensures that each value in this column corresponds to another value in a column in another table.
            For example, if there are two tables, one listing all Employees by ID, and another listing their payroll information, the `FOREIGN KEY` can ensure that every row in the payroll table corresponds to a valid employee in the master Employee list.

                                Movies table schema
CREATE TABLE movies (
    id INTEGER PRIMARY KEY NOT NULL, //NOT NULL rekomenduotina
    title TEXT, (FK)
    director TEXT,
    year INTEGER, 
    length_minutes INTEGER 
    FOREIGN KEY (title) REFERENCES kitos lenteles pavadinimas (kitos lenteles PK)
);

------------------------------------------
Lesson 17. ALTER TABLE (ADD, DROP, RENAME) - to add, remove, or modify columns and table constraints

Altering table to add new column(s)
ALTER TABLE mytable
ADD column DataType OptionalTableConstraint 
DEFAULT default_value;

Altering table to remove column(s)
ALTER TABLE mytable
DROP column_to_be_deleted;

Altering table name
ALTER TABLE mytable
RENAME TO new_table_name;

ex1.Add a column named Aspect_ratio with a FLOAT data type to store the aspect-ratio each movie was released in.
1 budas
ALTER TABLE Movies
ADD Aspect_ratio FLOAT;

ex2. Add another column named Language with a TEXT data type to store the language that the movie was released in. Ensure that the default for this language is English.
ALTER TABLE Movies
ADD Language TEXT
DEFAULT English;

--------------------------------------------
Lesson 18. IF EXISTS, DROP TABLE, TRUNCATE TABLE (remove an entire table including all of its data and metadata)

Drop table statement
DROP TABLE IF EXISTS mytable;


